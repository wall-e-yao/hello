//头文件 
#include<stdio.h>
#include<time.h>
#include<stdlib.h>
#include<conio.h>
#define N 3005
//函数声明 
void GetRandom(int *A,int n,int m,int k,int flag);

void Snap(int *a,int *b); 

void Show(const int *A,int n,int flag);   //打印A中数组

void Print(int *m,int *s);                //打印分析数据

void Insert_Sort(int *A,int n,int *movenum,int *snapnum);

void Shell_Sort(int *A,int n,int *movenum,int *snapnum);

void Select_Sort(int *A,int n,int *movenum,int *snapnum);

int Select_Find_Min(int *,int ,int ,int *,int *);

void BulidHeap(int *A,int n,int *movenum,int *comparenum);

void HeapAdjust(int *A,int parent,int n,int *movenum,int *comparenum);

void Heap_Sort(int *A,int n,int *movenum,int *comparenum);

void Bubble_Sort(int *A,int n,int *movenum,int *comparenum);

int Partition(int *A,int low,int high,int *movenum,int *comparenum);

void Qsort(int *A,int low,int high,int *movenum,int *comparenum);

void Quick_Sort(int *A,int n,int *movenum,int *comparenum);

void Msort(int *A,int*TmpA,int low,int high,int *movenum,int *comparenum);

void Merge(int *A,int*TmpA,int low,int mid,int high,int *movenum,int *comparenum);

void Merge_Sort(int *A,int n,int *movenum,int *comparenum);

void Reversal(int *A,int n);

void Aeasy(char ch,int *A,int n,int *movenum,int *comparenum);

void GetInfor(char ch);

void Layout();

void menu();

//函数实现
 
int main()
{
	while(1){
	menu();
	system("pause");
	system("cls");
	}
	return 0;
}
//产生随机数
void GetRandom(int *A,int n,int m,int k,int flag)  //flag = 0 ->A[0]开始存储 ； flag = 1 ->A[1]开始存储
{
	int i;
	srand((unsigned int)time(NULL));
	if(flag==0) 
	for(i=0;i<n;i++)
	{
		A[i] = rand()%(k-m+1)+m;  //产生m-k的随机数 
	}
	else if(flag==1) 
	for(i=1;i<=n;i++)
	{
		A[i] = rand()%(k-m+1)+m;
	}
	return ;
} 
//打印A中数组 
void Show(const int *A,int n,int flag) // flag = 0 ->A[0]开始打印 ； flag = 1 ->A[1]开始打印 
{
    int i;
    if(flag == 0) 
	for(i=0;i<n;i++)
	 printf("%d ",A[i]);
	 else if(flag==1)
	 for(i=1;i<=n;i++)
	 printf("%d ",A[i]);
	printf("\n");
	 return ;
}
//打印分析数据
void Print(int *m,int *s)
{
	printf("排序一共进行了%d次的数据移动，%d次数据比较\n",*m,*s);
	return ;
} 
//交换数据
void Snap(int *a,int *b)
{
	int temp = *a;
	 *a = *b;
	 *b = temp;
 } 
//插入排序
void Insert_Sort(int *A,int n,int *movenum,int *comparenum)
{
	*movenum = 0;
	*comparenum = 0;
	int i,j,temp;
    for(i=1;i<n;i++)
    {
    	temp = A[i];
		*comparenum+=1;
    	for(j=i;j>0&&A[j-1]>temp;j--)
    	{ 
			*comparenum+=1;	
    		A[j] = A[j-1];
			*movenum+=1;
		}
		A[j] = temp;
	}
	return ;
} 
//希尔排序
void Shell_Sort(int *A,int n,int *movenum,int *comparenum)
{
	*movenum = 0;
	*comparenum = 0;
	int i,j,k,D;
	int Sedgewick[] = {929,505,209,109,41,19,5,1};
	for(k=0,D=Sedgewick[k];D>0;D=Sedgewick[k++])
	{
		 for(i=D;i<n;i++)
    {
    	int temp = A[i];
		*comparenum+=1;
    	for(j=i;j>0&&A[j-D]>temp;j--)
    	{ 
			*comparenum+=1;
    		(*movenum)++;
    		A[j] = A[j-D];
		}
		A[j] = temp;
	}
	}
	return ;
} 
//选择排序
void Select_Sort(int *A,int n,int *movenum,int *comparenum) 
{
	*movenum = 0;
	*comparenum = 0;
	int i,minposion;
	for(i = 0;i<n;i++)
	{
		minposion = Select_Find_Min(A,i,n-1,movenum,comparenum);
		if(i!=minposion)
		{
		   Snap(&A[i],&A[minposion]);
		   (*movenum)+=3; 
		}	 
	} 
	return ;
}
//找到最小值的下标 
int Select_Find_Min(int *A,int left,int right,int *movenum,int *comparenum) 
{
	int min = A[left],minp = left;
	int i;
	for(i = left;i<=right;i++)
	{
		(*comparenum)++;
		if(A[i]<min)
		  {
		  	min = A[i];
		  	minp = i;
		  }
	}
	return minp;
}
//建立一个最大堆 
void BulidHeap(int *A,int n,int *movenum,int *comparenum)  //下标从1开始 
{
	  int parent,maxchild;
	  for(parent = n/2;parent>0;parent--)
	  {
	  	HeapAdjust(A,parent,n,movenum,comparenum);
	  }
	 return ; 
}
//将以parent为根结点的树 调成最大堆 
void HeapAdjust(int *A,int parent,int n,int *movenum,int *comparenum)
{
	int child;
	for(child=2*parent;child<=n;child *= 2)
	  	{
			if(child<n) 
			  {
			  	if(A[child]<A[child+1]){
			  		*comparenum+=1;
			  	     child++;
				  }
			  	 
			  }
		    if(A[parent]>=A[child]) 
		     break;
		     *comparenum+=1;
		    Snap(&A[parent],&A[child]);
		    *movenum+=3;
		    parent = child;
		}
}
//堆排序 
void Heap_Sort(int *A,int n,int *movenum,int *comparenum)
{
	*movenum = 0;
	*comparenum = 0;
	BulidHeap(A,n,movenum,comparenum);
	for(int i = n;i>0;i--)
	{
		Snap(&A[i],&A[1]);
		*movenum+=3;
		HeapAdjust(A,1,i-1,movenum,comparenum);
	}
}
//冒泡排序
void Bubble_Sort(int *A,int n,int *movenum,int *comparenum)
{
	*movenum = 0;
	*comparenum = 0;
	int i,j,flag;
	for(i=0;i<n;i++)
	 {
	 	flag = 0;
	 	for(j=0;j<n-i-1;j++)
	 	{
	 		if(A[j]>A[j+1])
	 		{
	 			Snap(&A[j],&A[j+1]);
	 			*movenum+=3;
	 			flag = 1;
			}
			*comparenum+=1;
		 }
		 if(flag==0)
		  break;
	}	
} 
//一趟快排，返回pivot的位置 
int Partition(int *A,int low,int high,int *movenum,int *comparenum)
{
	int pivot = A[low];
	while(low<high){
		while(low<high&&A[high]>=pivot) {
			high--;
			*comparenum+=1;
		}
		A[low] = A[high];
		*movenum+=1;
		while(low<high&&A[low]<=pivot) {
			low++;
			*comparenum+=1;
		}
		A[high] = A[low];
		*movenum+=1;
	}
	A[low] = pivot;	
	return low;
}
//从low->high的快排 
void Qsort(int *A,int low,int high,int *movenum,int *comparenum)
{
	if(low<high){
	    int pivotloc = Partition(A,low,high,movenum,comparenum);
		Qsort(A,low,pivotloc-1,movenum,comparenum);
		Qsort(A,pivotloc+1,high,movenum,comparenum);
	}
}
//快速排序 
void Quick_Sort(int *A,int n,int *movenum,int *comparenum)
{
	*movenum = *comparenum = 0;
	Qsort(A,0,n-1,movenum,comparenum);
}
//归并排序
void Merge(int *A,int* TmpA,int low,int mid,int high,int *movenum,int *comparenum)
{
	int i = low,j = mid+1,k = low,p;
	while(i<=mid&&j<=high)
	  {
	   TmpA[k++] = (A[i]<=A[j])?A[i++]:A[j++];
	    *comparenum+=1; 
	    *movenum+=1;
	   } 
	  
	while(i<=mid)
	 {
	 	TmpA[k++] = A[i++];
	 	*movenum+=1;
	 }
	while(j<=high)
	 {
	 	TmpA[k++] = A[j++];
	 	*movenum+=1;
	 }
	 for(p=low;p<=high;p++)
	 {
	 	A[p] = TmpA[p];
	 	*movenum+=1;
	 }
}

void Msort(int *A,int*TmpA,int low,int high,int *movenum,int *comparenum)
{
	int mid;
	if(low<high)
	{
		mid = (low+high)/2;
		Msort(A,TmpA,low,mid,movenum,comparenum);
		Msort(A,TmpA,mid+1,high,movenum,comparenum);
		Merge(A,TmpA,low,mid,high,movenum,comparenum);
	}
}
//归并排序接口 
void Merge_Sort(int *A,int n,int *movenum,int *comparenum)
{
	*movenum = 0;
	*comparenum = 0;
	int TmpA[N] = {0};
	Msort(A,TmpA,0,n-1,movenum,comparenum);
}
//逆置 
void Reversal(int *A,int n)
{
	int i;
   for(i=0;i<n/2;i++)
     Snap(&A[i],&A[n-i-1]);
}
//布局 
void Layout()
{
	printf("\t\t\t┏━━━━━━━━━━━━━┓\n");
	printf("\t\t\t┃       1:插入排序         ┃\n");
    printf("\t\t\t┣━━━━━━━━━━━━━┫\n");
	printf("\t\t\t┃       2:希尔排序         ┃\n");
    printf("\t\t\t┣━━━━━━━━━━━━━┫\n");
	printf("\t\t\t┃       3:选择排序         ┃\n");
    printf("\t\t\t┣━━━━━━━━━━━━━┫\n");
	printf("\t\t\t┃       4:堆排序           ┃\n");
    printf("\t\t\t┣━━━━━━━━━━━━━┫\n");
	printf("\t\t\t┃       5:冒泡排序         ┃\n");
    printf("\t\t\t┣━━━━━━━━━━━━━┫\n");
	printf("\t\t\t┃       6:快速排序         ┃\n");
    printf("\t\t\t┣━━━━━━━━━━━━━┫\n");
	printf("\t\t\t┃       7:归并排序         ┃\n");
    printf("\t\t\t┣━━━━━━━━━━━━━┫\n");
	printf("\t\t\t┃       8:统计分析         ┃\n");
    printf("\t\t\t┣━━━━━━━━━━━━━┫\n");
	printf("\t\t\t┃       0:退出             ┃\n");
    printf("\t\t\t┗━━━━━━━━━━━━━┛\n");
	
}
//菜单函数 
void menu()
{
   Layout();
   char ch = getch();
 if(ch>'0'&&ch<'8')
 {
        int A[N] = {0};
		int n,m,k;
		int movenum,comparenum;
		printf("请输入要求排序的个数：");
		scanf("%d",&n);
		printf("请输入关键字的范围：");
		scanf("%d%d",&m,&k);
		GetRandom(A,n,m,k,0);
		printf("随机序列：\n");
		Show(A,n,0);
		Aeasy(ch,A,n,&movenum,&comparenum);
        Show(A,n,0);
	    Print(&movenum,&comparenum);
        printf("有序序列：\n");
		Aeasy(ch,A,n,&movenum,&comparenum);
        Show(A,n,0);
	    Print(&movenum,&comparenum);
		printf("逆序序列：\n");
		Reversal(A,n);
        Show(A,n,0);
		Aeasy(ch,A,n,&movenum,&comparenum);
        Show(A,n,0);
	    Print(&movenum,&comparenum);
	   }
    else if(ch=='8')
	{
		//printf("输入你想统计哪种排序？");
		//char ch = getch();
		int A[N] = {0};
		int n,m,k;
		int movenum,comparenum;
		int num = 5;     //统计次数	
		for(ch='1';ch<'8';ch++){
			int summov1 = 0,sumcom1 = 0,summov2 = 0,sumcom2 = 0,summov3 = 0,sumcom3 = 0; 
			GetInfor(ch); 
		for(int i=1;i<=num;i++){
		srand((unsigned int)time(NULL));
 		n = rand()%2001+1000;
		m = 100;
		k = 300;
		//printf("\n第%d次分析：随机产生的n(排序个数)=%d,\n",i,n);
		GetRandom(A,n,m,k,0);
		//printf("随机序列：\n");
		//Show(A,n,0);
		Aeasy(ch,A,n,&movenum,&comparenum);
		summov1+=movenum; 
	    sumcom1+=comparenum;
        //Show(A,n,0);
	    //Print(&movenum,&comparenum);
        //printf("有序序列：\n");
		Aeasy(ch,A,n,&movenum,&comparenum);
		summov2+=movenum; 
	    sumcom2+=comparenum;
        //Show(A,n,0);
	    //Print(&movenum,&comparenum);
		//printf("逆序序列：\n");
		Reversal(A,n);
        //Show(A,n,0);
		Aeasy(ch,A,n,&movenum,&comparenum);
        //Show(A,n,0);
	    //Print(&movenum,&comparenum); 
	    summov3+=movenum; 
	    sumcom3+=comparenum;
		}
		printf("\t随机产生的n(排序个数)=%d,\n",n);
		printf("\t随机产生的五组数据分析：\n");
		printf("\t随机序列平均进行了%d次的数据移动，%d次数据比较\n",summov1/num,sumcom1/num); 
		printf("\t顺序序列平均进行了%d次的数据移动，%d次数据比较\n",summov2/num,sumcom2/num); 
		printf("\t逆序序列平均进行了%d次的数据移动，%d次数据比较\n",summov3/num,sumcom3/num); 
		}
		
	}
	else if(ch=='0')
	{
		exit(0); // 退出程序 
	}
}
//代码优化 ->小技巧 
void Aeasy(char ch,int *A,int n,int *movenum,int *comparenum)
{
  switch(ch)
		{
			case '1':Insert_Sort(A,n,movenum,comparenum);break;
			case '2':Shell_Sort(A,n,movenum,comparenum);break;
            case '3':Select_Sort(A,n,movenum,comparenum);break;
            case '4':Heap_Sort(A,n,movenum,comparenum);break;
            case '5':Bubble_Sort(A,n,movenum,comparenum);break;
            case '6':Quick_Sort(A,n,movenum,comparenum);break;
            case '7':Merge_Sort(A,n,movenum,comparenum);break;
            case '0': exit(0);break; 
            default: break;
		}
}
//
void GetInfor(char ch)
{
	switch(ch)
		{
			case '1':printf("\n\t插入排序：\n");break;
			case '2':printf("\n\t希尔排序：\n");break;
            case '3':printf("\n\t选择排序：\n");break;
            case '4':printf("\n\t堆排序 ： \n");break;
            case '5':printf("\n\t冒泡排序：\n");break;
            case '6':printf("\n\t快速排序：\n");break;
            case '7':printf("\n\t归并排序：\n");break;
            case '0': exit(0);break; 
            default: break;
		}
}